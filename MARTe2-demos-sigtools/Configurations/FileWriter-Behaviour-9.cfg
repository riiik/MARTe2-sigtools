// Swaps between two output files showing no data loss at 1 kHz in initial
//      trials.
// Update: Occasionally the swap mechanism seems somehow to cause the output to
//      drop for a few cycles thereby causing the trigger that switches between 
//      files to be missed.  This will cause data loss.  Another problem is the
//      messages or the actions they trigger somehow fail to complete and no 
//      output is written to the files thereafter.  These both require 
//      investigation.  This might just be at high cycle frequencies.
//
// ******* INVOCATION ******* (as FileWriter-Behaviour-5.cfg)
// Ensure the softIoc is invoked with the associated config first, e.g.:
// softIoc -d ../MARTe2-demos-sigtools/Configurations/FileWriter-Behaviour-IOC.db
//
// Run with the -m parameter to pass a message to the StateMachine, e.g.:
// ./m2 FileWriter-Behaviour-9.cfg -m StateMachine:START
//
// From another terminal send messages to the StateMachine, e.g.:
// caput FileWriter-Behaviour:COMMAND 0
// caput FileWriter-Behaviour:COMMAND 1
//
//
+EPICSCAInterface= {
    Class = EPICS::EPICSCAClient
    StackSize = 1048576
    CPUs = 0x1
    AutoStart = 0
    +PV_STATUS = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour:STATUS"
        PVType = int32
    }    
    +PV_COMMAND = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour:COMMAND"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "GOTORUN1"}, {"0", "GOTOIDLE"}}
        }
    }
    +PV_ERROR_RST = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour:RESET"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Ignore
            Function = "RESET" 
        }
    }
    +PV_FILE = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour:FILE"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "FLUSH"}}
        }
    }
}
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2-dev/Resources/HTTP/"
    }    
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN1 = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN1
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
//            +StartHttpServer = {
//                Class = Message
//                Destination = "WebServer"
//                Mode = ExpectsReply
//                Function = "Start"
//            }
            +StartEPICSCAInterface = {
                Class = Message
                Destination = "EPICSCAInterface"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +DoSomethingWhenEntering = {
                Class = Message
                Destination = "TestApp.Data.SignalsWriter"
                Mode = ExpectsReply
                Function = FlushFile
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTORUN1 = {
            Class = StateMachineEvent
            NextState = "RUN1"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run1
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN1 = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +FlushTheFile = {
                Class = Message
                Destination = "TestApp.Data.SignalsWriter"
                Mode = ExpectsReply
                Function = FlushFile
            }
            +CloseTheFile = {
                Class = Message
                Destination = "TestApp.Data.SignalsWriter"
                Mode = ExpectsReply
                Function = CloseFile
            }
            +OpenTheFile = {
                Class = Message
                Destination = "TestApp.Data.SignalsWriter"
                Mode = ExpectsReply
                Function = OpenFile
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "/tmp/bl8320-FileWriter-Behaviour-p1.csv"
                }
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +FLUSH = {
            Class = ReferenceContainer
            +DoSomethingWhenEntering = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = FlushFile
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMSwitchFiles = {
            Class = MessageGAM
            TriggerOnChange = 0
            +Events = {
                Class = ReferenceContainer
                +Event1 = {
                    Class = EventConditionTrigger
                    EventTrigger = {
                        Command1 = 1
                    }
                    +FlushTheFile = {
                        Class = Message
                        Destination = "TestApp.Data.SignalsWriter"
                        Mode = ExpectsReply
                        Function = FlushFile
                    }
                    +CloseTheFile = {
                        Class = Message
                        Destination = "TestApp.Data.SignalsWriter"
                        Mode = ExpectsReply
                        Function = CloseFile
                    }
                    +OpenTheFile = {
                        Class = Message
                        Destination = "TestApp.Data.SignalsWriter"
                        Mode = ExpectsReply
                        Function = OpenFile
                        +Parameters = {
                            Class = ConfigurationDatabase
                            param1 = "/tmp/bl8320-FileWriter-Behaviour-p2.csv"
                        }
                    }
                }
                +Event2 = {
                    Class = EventConditionTrigger
                    EventTrigger = {
                        Command2 = 1
                    }
                    +FlushTheFile = {
                        Class = Message
                        Destination = "TestApp.Data.SignalsWriter"
                        Mode = ExpectsReply
                        Function = FlushFile
                    }
                    +CloseTheFile = {
                        Class = Message
                        Destination = "TestApp.Data.SignalsWriter"
                        Mode = ExpectsReply
                        Function = CloseFile
                    }
                    +OpenTheFile = {
                        Class = Message
                        Destination = "TestApp.Data.SignalsWriter"
                        Mode = ExpectsReply
                        Function = OpenFile
                        +Parameters = {
                            Class = ConfigurationDatabase
                            param1 = "/tmp/bl8320-FileWriter-Behaviour-p1.csv"
                        }
                    }
                }
            }
            InputSignals = {
                Command1 = {
                    DataSource = DDB1
                    Type = uint8
                }
                Command2 = {
                    DataSource = DDB1
                    Type = uint8
                }
            }
            OutputSignals = {
                PendingMessages1 = {
                    DataSource = DDB1
                    Type = uint32
                }
                PendingMessages2 = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1000
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32           
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
            }
        }
        +GAMTrigger= {
            Class = MathExpressionGAM
            // This GAM outputs 1 each time Interval ms elapses and continues to do so for RecordTime ms, and 0 at all other times.
            //      Note: with Interval and RecordTime set to the same this effectively permanently on.
            Expression = "
                            Interval = (uint32) 1000000;
                            RecordTime = (uint32) 1000000; 
                            Modulus = (uint32) ((float64) Interval * ((float64) Time / (float64) Interval - (float64) ((uint32) ((float64) Time / (float64) Interval))));
                            Digger = (uint8) (Modulus <= RecordTime);
                         "
            InputSignals = {
                Time = {
                    Type = uint32
                    NumberOfElements = 1
                    DataSource = DDB1
                }
            }
            OutputSignals = {
                Digger = {
                    Type = uint8
                    DataSource = DDB1
                }
            }
        }
        +GAMSwitchTrigger= {
            Class = MathExpressionGAM
            // This GAM outputs 1 each time Interval microseconds elapses and continues to do so for RecordTime microseconds, and 0 at all other times.
            Expression = "
                            Interval = (uint32) 10000000;
                            RecordTime = (uint32) 0; 
                            DoubleInterval = Interval * (uint32) 2;
                            Time2 = Time + Interval;
                            Modulus1 = (uint32) (
                                            (float64) DoubleInterval * (
                                                    (float64) Time2 / (float64) DoubleInterval - 
                                                    (float64) ((uint32) ((float64) Time2 / (float64) DoubleInterval))
                                                )
                                            );
                            Modulus2 = (uint32) (
                                            (float64) DoubleInterval * (
                                                    (float64) Time / (float64) DoubleInterval - 
                                                    (float64) ((uint32) ((float64) Time / (float64) DoubleInterval))
                                                )
                                            );
                            Command1 = (uint8) (Modulus1 <= RecordTime) && (uint8) (Time != (uint32) 0);
                            Command2 = (uint8) (Modulus2 <= RecordTime) && (uint8) (Time != (uint32) 0);
                         "
            InputSignals = {
                Time = {
                    Type = uint32
                    NumberOfElements = 1
                    DataSource = DDB1
                }
            }
            OutputSignals = {
                Command1 = {
                    Type = uint8
                    DataSource = DDB1
                }
                Command2 = {
                    Type = uint8
                    DataSource = DDB1
                }
            }
        }
        +GAMRef0 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 0.1
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
                Digger = {
                    DataSource = DDB1
                    Type = uint8
                }
                Command1 = {
                    DataSource = DDB1
                    Type = uint8
                }
                Command2 = {
                    DataSource = DDB1
                    Type = uint8
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                Digger = {
                    DataSource = SignalsWriter
                    Type = uint8
                }
                Command1 = {
                    DataSource = SignalsWriter
                    Type = uint8
                }
                Command2 = {
                    DataSource = SignalsWriter
                    Type = uint8
                }
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                Reference0 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
            }
        }
        +GAMPerformanceWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = Timings
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = Timings
                    Type = uint32           
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = PerformanceWriter
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = PerformanceWriter 
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
            }
        }
        +DisplayGAM = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    Type = uint32
                    DataSource = DDB1
                }
                Digger = {
                    Type = uint8
                    DataSource = DDB1
                }
                Command1 = {
                    Type = uint8
                    DataSource = DDB1
                }
                Command2 = {
                    Type = uint8
                    DataSource = DDB1
                }
            }
            OutputSignals = {
                Time = {
                    Type = uint32
                    DataSource = LoggerDataSource
                }
                Digger = {
                    Type = uint8
                    DataSource = LoggerDataSource
                }
                Command1 = {
                    Type = uint8
                    DataSource = LoggerDataSource
                }
                Command2 = {
                    Type = uint8
                    DataSource = LoggerDataSource
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +SignalsWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 100000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/tmp/bl8320-FileWriter-Behaviour-p1.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Digger = { 
                    Type = uint8
                }
                Command1 = {
                    Type = uint8
                }
                Command2 = {
                    Type = uint8
                }
                Time = { 
                    Type = uint32
                }
                Reference0 = {
                    Type = float64
                }
            }
        }
        +PerformanceWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/tmp/bl8320-FileWriter-Behaviour-performance.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    Type = uint32
                } 
                Run_Thread1_CycleTime = {
                    Type = uint32
                }
                GAMTimer_ReadTime = {
                    Type = uint32
                }
                GAMTimer_ExecTime = {
                    Type = uint32
                }
                GAMTimer_WriteTime = {
                    Type = uint32
                }
                GAMPerformanceWriter_WriteTime = {
                    Type = uint32
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = { GAMTimer }
                }
            }
        }
        +Run1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = { GAMTimer GAMTrigger GAMSwitchTrigger GAMSwitchFiles GAMSignalsWriter GAMRef0 }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
